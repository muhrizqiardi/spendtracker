// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/expense.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/muhrizqiardi/spendtracker/internal/database/model"
	gomock "go.uber.org/mock/gomock"
)

// MockExpenseRepository is a mock of ExpenseRepository interface.
type MockExpenseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseRepositoryMockRecorder
}

// MockExpenseRepositoryMockRecorder is the mock recorder for MockExpenseRepository.
type MockExpenseRepositoryMockRecorder struct {
	mock *MockExpenseRepository
}

// NewMockExpenseRepository creates a new mock instance.
func NewMockExpenseRepository(ctrl *gomock.Controller) *MockExpenseRepository {
	mock := &MockExpenseRepository{ctrl: ctrl}
	mock.recorder = &MockExpenseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseRepository) EXPECT() *MockExpenseRepositoryMockRecorder {
	return m.recorder
}

// DeleteOneByID mocks base method.
func (m *MockExpenseRepository) DeleteOneByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneByID indicates an expected call of DeleteOneByID.
func (mr *MockExpenseRepositoryMockRecorder) DeleteOneByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneByID", reflect.TypeOf((*MockExpenseRepository)(nil).DeleteOneByID), id)
}

// GetMany mocks base method.
func (m *MockExpenseRepository) GetMany(limit, offset int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", limit, offset)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockExpenseRepositoryMockRecorder) GetMany(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockExpenseRepository)(nil).GetMany), limit, offset)
}

// GetManyBelongedToAccount mocks base method.
func (m *MockExpenseRepository) GetManyBelongedToAccount(userID, accountID uint, limit, offset int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToAccount", userID, accountID, limit, offset)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToAccount indicates an expected call of GetManyBelongedToAccount.
func (mr *MockExpenseRepositoryMockRecorder) GetManyBelongedToAccount(userID, accountID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToAccount", reflect.TypeOf((*MockExpenseRepository)(nil).GetManyBelongedToAccount), userID, accountID, limit, offset)
}

// GetManyBelongedToCategory mocks base method.
func (m *MockExpenseRepository) GetManyBelongedToCategory(userID, categoryID uint, limit, offset int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToCategory", userID, categoryID, limit, offset)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToCategory indicates an expected call of GetManyBelongedToCategory.
func (mr *MockExpenseRepositoryMockRecorder) GetManyBelongedToCategory(userID, categoryID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToCategory", reflect.TypeOf((*MockExpenseRepository)(nil).GetManyBelongedToCategory), userID, categoryID, limit, offset)
}

// GetManyBelongedToCategoryAccount mocks base method.
func (m *MockExpenseRepository) GetManyBelongedToCategoryAccount(userID, categoryID, accountID uint, limit, offset int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToCategoryAccount", userID, categoryID, accountID, limit, offset)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToCategoryAccount indicates an expected call of GetManyBelongedToCategoryAccount.
func (mr *MockExpenseRepositoryMockRecorder) GetManyBelongedToCategoryAccount(userID, categoryID, accountID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToCategoryAccount", reflect.TypeOf((*MockExpenseRepository)(nil).GetManyBelongedToCategoryAccount), userID, categoryID, accountID, limit, offset)
}

// GetManyBelongedToUser mocks base method.
func (m *MockExpenseRepository) GetManyBelongedToUser(userID uint, limit, offset int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToUser", userID, limit, offset)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToUser indicates an expected call of GetManyBelongedToUser.
func (mr *MockExpenseRepositoryMockRecorder) GetManyBelongedToUser(userID, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToUser", reflect.TypeOf((*MockExpenseRepository)(nil).GetManyBelongedToUser), userID, limit, offset)
}

// GetOneByID mocks base method.
func (m *MockExpenseRepository) GetOneByID(id uint) (model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByID", id)
	ret0, _ := ret[0].(model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByID indicates an expected call of GetOneByID.
func (mr *MockExpenseRepositoryMockRecorder) GetOneByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByID", reflect.TypeOf((*MockExpenseRepository)(nil).GetOneByID), id)
}

// Insert mocks base method.
func (m *MockExpenseRepository) Insert(userID, accountID uint, name, description string, amount int) (model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", userID, accountID, name, description, amount)
	ret0, _ := ret[0].(model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockExpenseRepositoryMockRecorder) Insert(userID, accountID, name, description, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockExpenseRepository)(nil).Insert), userID, accountID, name, description, amount)
}

// UpdateOneByID mocks base method.
func (m *MockExpenseRepository) UpdateOneByID(id uint, name, description string, amount int) (model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneByID", id, name, description, amount)
	ret0, _ := ret[0].(model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneByID indicates an expected call of UpdateOneByID.
func (mr *MockExpenseRepositoryMockRecorder) UpdateOneByID(id, name, description, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneByID", reflect.TypeOf((*MockExpenseRepository)(nil).UpdateOneByID), id, name, description, amount)
}
