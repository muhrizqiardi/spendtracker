// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/expense.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	model "github.com/muhrizqiardi/spendtracker/internal/database/model"
	dto "github.com/muhrizqiardi/spendtracker/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockExpenseService is a mock of ExpenseService interface.
type MockExpenseService struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseServiceMockRecorder
}

// MockExpenseServiceMockRecorder is the mock recorder for MockExpenseService.
type MockExpenseServiceMockRecorder struct {
	mock *MockExpenseService
}

// NewMockExpenseService creates a new mock instance.
func NewMockExpenseService(ctrl *gomock.Controller) *MockExpenseService {
	mock := &MockExpenseService{ctrl: ctrl}
	mock.recorder = &MockExpenseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseService) EXPECT() *MockExpenseServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExpenseService) Create(userID, accountID int, payload dto.CreateExpenseDTO) (model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, accountID, payload)
	ret0, _ := ret[0].(model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExpenseServiceMockRecorder) Create(userID, accountID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExpenseService)(nil).Create), userID, accountID, payload)
}

// DeleteOneByID mocks base method.
func (m *MockExpenseService) DeleteOneByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneByID indicates an expected call of DeleteOneByID.
func (mr *MockExpenseServiceMockRecorder) DeleteOneByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneByID", reflect.TypeOf((*MockExpenseService)(nil).DeleteOneByID), id)
}

// GetMany mocks base method.
func (m *MockExpenseService) GetMany(itemPerPage, page int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMany", itemPerPage, page)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMany indicates an expected call of GetMany.
func (mr *MockExpenseServiceMockRecorder) GetMany(itemPerPage, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMany", reflect.TypeOf((*MockExpenseService)(nil).GetMany), itemPerPage, page)
}

// GetManyBelongedToAccount mocks base method.
func (m *MockExpenseService) GetManyBelongedToAccount(userID, accountID, itemPerPage, page int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToAccount", userID, accountID, itemPerPage, page)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToAccount indicates an expected call of GetManyBelongedToAccount.
func (mr *MockExpenseServiceMockRecorder) GetManyBelongedToAccount(userID, accountID, itemPerPage, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToAccount", reflect.TypeOf((*MockExpenseService)(nil).GetManyBelongedToAccount), userID, accountID, itemPerPage, page)
}

// GetManyBelongedToCategory mocks base method.
func (m *MockExpenseService) GetManyBelongedToCategory(userID, categoryID, itemPerPage, page int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToCategory", userID, categoryID, itemPerPage, page)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToCategory indicates an expected call of GetManyBelongedToCategory.
func (mr *MockExpenseServiceMockRecorder) GetManyBelongedToCategory(userID, categoryID, itemPerPage, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToCategory", reflect.TypeOf((*MockExpenseService)(nil).GetManyBelongedToCategory), userID, categoryID, itemPerPage, page)
}

// GetManyBelongedToCategoryAccount mocks base method.
func (m *MockExpenseService) GetManyBelongedToCategoryAccount(userID, categoryID, accountID, itemPerPage, page int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToCategoryAccount", userID, categoryID, accountID, itemPerPage, page)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToCategoryAccount indicates an expected call of GetManyBelongedToCategoryAccount.
func (mr *MockExpenseServiceMockRecorder) GetManyBelongedToCategoryAccount(userID, categoryID, accountID, itemPerPage, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToCategoryAccount", reflect.TypeOf((*MockExpenseService)(nil).GetManyBelongedToCategoryAccount), userID, categoryID, accountID, itemPerPage, page)
}

// GetManyBelongedToUser mocks base method.
func (m *MockExpenseService) GetManyBelongedToUser(userID, itemPerPage, page int) ([]model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyBelongedToUser", userID, itemPerPage, page)
	ret0, _ := ret[0].([]model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyBelongedToUser indicates an expected call of GetManyBelongedToUser.
func (mr *MockExpenseServiceMockRecorder) GetManyBelongedToUser(userID, itemPerPage, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyBelongedToUser", reflect.TypeOf((*MockExpenseService)(nil).GetManyBelongedToUser), userID, itemPerPage, page)
}

// GetOneByID mocks base method.
func (m *MockExpenseService) GetOneByID(id int) (model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByID", id)
	ret0, _ := ret[0].(model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByID indicates an expected call of GetOneByID.
func (mr *MockExpenseServiceMockRecorder) GetOneByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByID", reflect.TypeOf((*MockExpenseService)(nil).GetOneByID), id)
}

// UpdateOneByID mocks base method.
func (m *MockExpenseService) UpdateOneByID(id int, payload dto.UpdateExpenseDTO) (model.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneByID", id, payload)
	ret0, _ := ret[0].(model.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneByID indicates an expected call of UpdateOneByID.
func (mr *MockExpenseServiceMockRecorder) UpdateOneByID(id, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneByID", reflect.TypeOf((*MockExpenseService)(nil).UpdateOneByID), id, payload)
}
